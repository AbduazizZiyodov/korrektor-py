{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Korrektor-Py Korrektor-Py - https://korrektor.uz loyihasining API'si uchun ishlab chiqilgan python kutubxona. Loyiha haqida korrektor.uz quyidagi imkoniyatlarni siz uchun taqdim etadi. Imlo xatoliklarni tekshirish Matnlarni transliteratsiya qilish Tasvir fayllardan matnlarni ajratib olish (jpeg, png, gif) Hujjatlarni transliteratsiya qilish (docx, xlsx, pptx, epub, html) Matnlar bilan ishlashda: raqamni so'zga o'girish, so'zlarni korreksiya qilish, so'zni bo'g'inga ajratish, dublikatlarni o'chirish, matndagi so'zlar chastotasini hisoblash kabi qo'shimcha vositalardan foydalanish imkoniyatini yaratib beradi. Ilovadan foydalanish mutlaqo tekin va dasturchilar uchun ham turli yechimlar mavjud. Python dasturchilar uchun turli yechimlardan biri ushbu kutubxona hisoblanadi. Yuqorida keltirilgan barcha imkoniyatlardan python dasturlash tili orqali bahramand bo'lishingiz mumkin. O'rnatish pip yordamida: 1 pip3 install --upgrade korrektor-py Yoki: Loyihani asl manba kodidan build qilib, so'ng o'rnatish uchun repozitoriyani ko'chirib oling: 1 2 git clone https://github.com/AbduazizZiyodov/korrektor-py.git cd korrektor-py/ Loyiha direktoriyasiga o'tganingizdan so'ng setup.py yordamida uni build qiling. Loyiha versiyasini aniqlab olgandan so'ng, pip va wheel fayli yordamida o'rnatishingiz mumkin. 1 2 3 python3 setup.py sdist bdist_wheel VERSION = $( python3 -c \"from __version__ import version;print(version)\" ) pip3 install dist/Korrektor_Py- $VERSION -py3-none-any.whl Loyiha asoschisi: Manuchehr Usmonov Ushbu kutubxona muallifi: Abduaziz Ziyodov","title":"Kirish. O'rnatish"},{"location":"#korrektor-py","text":"Korrektor-Py - https://korrektor.uz loyihasining API'si uchun ishlab chiqilgan python kutubxona.","title":"Korrektor-Py"},{"location":"#loyiha-haqida","text":"korrektor.uz quyidagi imkoniyatlarni siz uchun taqdim etadi. Imlo xatoliklarni tekshirish Matnlarni transliteratsiya qilish Tasvir fayllardan matnlarni ajratib olish (jpeg, png, gif) Hujjatlarni transliteratsiya qilish (docx, xlsx, pptx, epub, html) Matnlar bilan ishlashda: raqamni so'zga o'girish, so'zlarni korreksiya qilish, so'zni bo'g'inga ajratish, dublikatlarni o'chirish, matndagi so'zlar chastotasini hisoblash kabi qo'shimcha vositalardan foydalanish imkoniyatini yaratib beradi. Ilovadan foydalanish mutlaqo tekin va dasturchilar uchun ham turli yechimlar mavjud. Python dasturchilar uchun turli yechimlardan biri ushbu kutubxona hisoblanadi. Yuqorida keltirilgan barcha imkoniyatlardan python dasturlash tili orqali bahramand bo'lishingiz mumkin.","title":"Loyiha haqida"},{"location":"#ornatish","text":"pip yordamida: 1 pip3 install --upgrade korrektor-py Yoki: Loyihani asl manba kodidan build qilib, so'ng o'rnatish uchun repozitoriyani ko'chirib oling: 1 2 git clone https://github.com/AbduazizZiyodov/korrektor-py.git cd korrektor-py/ Loyiha direktoriyasiga o'tganingizdan so'ng setup.py yordamida uni build qiling. Loyiha versiyasini aniqlab olgandan so'ng, pip va wheel fayli yordamida o'rnatishingiz mumkin. 1 2 3 python3 setup.py sdist bdist_wheel VERSION = $( python3 -c \"from __version__ import version;print(version)\" ) pip3 install dist/Korrektor_Py- $VERSION -py3-none-any.whl Loyiha asoschisi: Manuchehr Usmonov Ushbu kutubxona muallifi: Abduaziz Ziyodov","title":"O'rnatish"},{"location":"objects/","text":"Asosiy obyektlar haqida korrektor_py.core.Korrektor Korrektor obyekti o'zida API ning barcha metodlarini jamlagan Argumentlar: token:str - tizim tomonidan berilgan token base_api_url:Optional[str] - Asosiy API manzili, kutubxona tomonidan default qiymat belgilangan. korrektor_py.api.Client Client obyekti API bilan muloqot qilish vazifasida keladi. Argumentlar: token:str - tizim tomonidan berilgan token base_api_url:Optional[str] - Asosiy API manzili, kutubxona tomonidan default qiymat belgilangan. Annotatsiyalar Dasturchilarga qulaylik yaratish uchun type-hinting masalasiga alohida urg'u berilgan. Har bir method muvaffaqiyatli bajarilganida dict emas maxsus python obyektini qaytaradi va har bir kiritilgan & chiqarilgan qiymatlar maydonlari bo'yicha tekshiruvdan o'tadi (validation). 1 2 3 4 5 # dict bo'lsa result [ \"data\" ] # obyekt bo'lsa result . data # izi Ushbu \"type-hint\"lar deyarli barcha zamonaviy kod muharrirlari tomonidan qo'llab quvvatlanadi: Metodlar tomonidan qaytarilgan barcha natijalar maxsus obyekt ko'rinishida bo'ladi ( dict emas). Muvvaqiyatsiz natijalar uchun yagona obyekt ( ResponseError ) qaytariladi. korrektor_py.models.ResponseText status:str - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatli javoblar uchun ok qaytariladi. code:str - yuqoridagi statusga biriktirilgan maxsus kod. Muvaffaqiyatli javoblar uchun 200 qaytariladi. text:str - API tomonidan ishlov berilgan so'z yoki gap. korrektor_py.models.ResponseData status:str - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatli javoblar uchun ok qaytariladi. code:str - yuqoridagi statusga biriktirilgan maxsus kod. Muvaffaqiyatli javoblar uchun 200 qaytariladi. data:Iterable - API tomonidan ishlov berilgan so'z yoki gaplardan iborat massiv. korrektor_py.models.FileResponse status:str - holat haqidagi maxsus so'z. Fayl saqlangan bo'lsa File saved belgilangan turadi. file_name:str - saqlangan fayl nomi yoki joyi. Xatoliklar uchun: korrektor_py.models.ResponseError status:str - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatsiz javoblar uchun odatda error qaytariladi. code:str - yuqoridagi statusga biriktirilgan maxsus kod ( 200 dan farqli). description:str - API tomonidan qaytarilgan xatolik haqidagi xabar. Attributlar Yuqoridagilardan qanday foydalanishni bilmayotganlar uchun: Misol uchun siz natijani olib terminalga print qilib ko'rdingiz va u ResponseError obyekti ekan. Tepada ko'rsatilganidek u status , code va description kabi atributlarga ega. 1 2 3 4 5 6 7 8 result = korrektor . spell_check ( ... ) # xatolik xabarini olish uchun description = result . description # xatolik statusi description = result . status # va hokazo Ba'zi metodlar Yuqoridagi obyektlar ba'zi metodlarga ega (ko'p foydalananilgan): json() - natijani JSON ko'rinishidagi python'dagi satr ga o'tkazadi. dict() - obyektni python'dagi dict ko'rinishiga o'tkazadi ( dict != json str ). Keyingi sahifalarda esa kutubxonada mavjud bo'lgan barcha metodlar va ularni qanday ishlatish haqida birma-bir to'liq ma'lumotlar keltirilgan.","title":"Asosiy va \"Response\" obyektlari"},{"location":"objects/#asosiy-obyektlar-haqida","text":"","title":"Asosiy obyektlar haqida"},{"location":"objects/#korrektor_pycorekorrektor","text":"Korrektor obyekti o'zida API ning barcha metodlarini jamlagan Argumentlar: token:str - tizim tomonidan berilgan token base_api_url:Optional[str] - Asosiy API manzili, kutubxona tomonidan default qiymat belgilangan.","title":"korrektor_py.core.Korrektor"},{"location":"objects/#korrektor_pyapiclient","text":"Client obyekti API bilan muloqot qilish vazifasida keladi. Argumentlar: token:str - tizim tomonidan berilgan token base_api_url:Optional[str] - Asosiy API manzili, kutubxona tomonidan default qiymat belgilangan. Annotatsiyalar Dasturchilarga qulaylik yaratish uchun type-hinting masalasiga alohida urg'u berilgan. Har bir method muvaffaqiyatli bajarilganida dict emas maxsus python obyektini qaytaradi va har bir kiritilgan & chiqarilgan qiymatlar maydonlari bo'yicha tekshiruvdan o'tadi (validation). 1 2 3 4 5 # dict bo'lsa result [ \"data\" ] # obyekt bo'lsa result . data # izi Ushbu \"type-hint\"lar deyarli barcha zamonaviy kod muharrirlari tomonidan qo'llab quvvatlanadi: Metodlar tomonidan qaytarilgan barcha natijalar maxsus obyekt ko'rinishida bo'ladi ( dict emas). Muvvaqiyatsiz natijalar uchun yagona obyekt ( ResponseError ) qaytariladi.","title":"korrektor_py.api.Client"},{"location":"objects/#korrektor_pymodelsresponsetext","text":"status:str - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatli javoblar uchun ok qaytariladi. code:str - yuqoridagi statusga biriktirilgan maxsus kod. Muvaffaqiyatli javoblar uchun 200 qaytariladi. text:str - API tomonidan ishlov berilgan so'z yoki gap.","title":"korrektor_py.models.ResponseText"},{"location":"objects/#korrektor_pymodelsresponsedata","text":"status:str - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatli javoblar uchun ok qaytariladi. code:str - yuqoridagi statusga biriktirilgan maxsus kod. Muvaffaqiyatli javoblar uchun 200 qaytariladi. data:Iterable - API tomonidan ishlov berilgan so'z yoki gaplardan iborat massiv.","title":"korrektor_py.models.ResponseData"},{"location":"objects/#korrektor_pymodelsfileresponse","text":"status:str - holat haqidagi maxsus so'z. Fayl saqlangan bo'lsa File saved belgilangan turadi. file_name:str - saqlangan fayl nomi yoki joyi. Xatoliklar uchun:","title":"korrektor_py.models.FileResponse"},{"location":"objects/#korrektor_pymodelsresponseerror","text":"status:str - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatsiz javoblar uchun odatda error qaytariladi. code:str - yuqoridagi statusga biriktirilgan maxsus kod ( 200 dan farqli). description:str - API tomonidan qaytarilgan xatolik haqidagi xabar. Attributlar Yuqoridagilardan qanday foydalanishni bilmayotganlar uchun: Misol uchun siz natijani olib terminalga print qilib ko'rdingiz va u ResponseError obyekti ekan. Tepada ko'rsatilganidek u status , code va description kabi atributlarga ega. 1 2 3 4 5 6 7 8 result = korrektor . spell_check ( ... ) # xatolik xabarini olish uchun description = result . description # xatolik statusi description = result . status # va hokazo","title":"korrektor_py.models.ResponseError"},{"location":"objects/#bazi-metodlar","text":"Yuqoridagi obyektlar ba'zi metodlarga ega (ko'p foydalananilgan): json() - natijani JSON ko'rinishidagi python'dagi satr ga o'tkazadi. dict() - obyektni python'dagi dict ko'rinishiga o'tkazadi ( dict != json str ). Keyingi sahifalarda esa kutubxonada mavjud bo'lgan barcha metodlar va ularni qanday ishlatish haqida birma-bir to'liq ma'lumotlar keltirilgan.","title":"Ba'zi metodlar"},{"location":"quickstart/","text":"Havolalar Loyihaning asosiy sahifasi , uning API'si va API yo'riqnomasi Ishni Boshlash Kutubxonani o'rnatganingizdan so'ng, undagi API'ning barcha metodlari jamlangan Korrektor obyektini loyihaga import qiling. So'ng, ushbu asosiy obyektga sizga tizim tomonidan berilgan token'ni argument sifatida berib, ishga tushuring (initialization). 1 2 3 from korrektor_py import Korrektor korrektor = Korrektor ( \"SENING_TOKENING\" ) Tokenlar Tokenlar va shunga o'xshash \"sirli\" ma'lumotlarni kodda saqlash umuman tavsiya etilmaydi. Shuning uchun ularni .env ko'rinishidagi fayllar yoki tizimning muhitida (e.g. env variables) saqlang. Terminalda: 1 export KORREKTOR_TOKEN = TIZIM_TOMONIDAN_BERILGAN_TOKEN code.py ya'ni kodingizda 1 2 import os TOKEN = os . getenv ( \"KORREKTOR_TOKEN\" ) Qo'shimcha resurs Metodlardan foydalanish Sinov maqsadida imloviy xatolarni tekshirish metodini ishlatib ko'ramiz. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import os from korrektor_py import Korrektor TOKEN = os . getenv ( \"KORREKTOR_TOKEN\" ) korrektor = Korrektor ( TOKEN ) def main () -> None : remove_modifiers = True words = [ \"saloma\" , \"dunyo\" ] result = korrektor . spell_check ( words , remove_modifiers ) print ( result . dict ()) if __name__ == \"__main__\" : main () O'ng tomonda esa dict ga o'girilgan API orqali qayta ishlangan ma'lumot. Xullas ishladi ;)","title":"Ishni boshlash"},{"location":"quickstart/#ishni-boshlash","text":"Kutubxonani o'rnatganingizdan so'ng, undagi API'ning barcha metodlari jamlangan Korrektor obyektini loyihaga import qiling. So'ng, ushbu asosiy obyektga sizga tizim tomonidan berilgan token'ni argument sifatida berib, ishga tushuring (initialization). 1 2 3 from korrektor_py import Korrektor korrektor = Korrektor ( \"SENING_TOKENING\" ) Tokenlar Tokenlar va shunga o'xshash \"sirli\" ma'lumotlarni kodda saqlash umuman tavsiya etilmaydi. Shuning uchun ularni .env ko'rinishidagi fayllar yoki tizimning muhitida (e.g. env variables) saqlang. Terminalda: 1 export KORREKTOR_TOKEN = TIZIM_TOMONIDAN_BERILGAN_TOKEN code.py ya'ni kodingizda 1 2 import os TOKEN = os . getenv ( \"KORREKTOR_TOKEN\" ) Qo'shimcha resurs","title":"Ishni Boshlash"},{"location":"quickstart/#metodlardan-foydalanish","text":"Sinov maqsadida imloviy xatolarni tekshirish metodini ishlatib ko'ramiz. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import os from korrektor_py import Korrektor TOKEN = os . getenv ( \"KORREKTOR_TOKEN\" ) korrektor = Korrektor ( TOKEN ) def main () -> None : remove_modifiers = True words = [ \"saloma\" , \"dunyo\" ] result = korrektor . spell_check ( words , remove_modifiers ) print ( result . dict ()) if __name__ == \"__main__\" : main () O'ng tomonda esa dict ga o'girilgan API orqali qayta ishlangan ma'lumot. Xullas ishladi ;)","title":"Metodlardan foydalanish"},{"location":"testing/","text":"Testing Loyihani sinovdan o'tkazishda pytest dan foydalanildi. Barcha testlar esa tests/ direktoriyasida va asosiy fayl test_korrektor_py.py hisoblanadi. Pytest Agar sizda pytest o'rnatilmagan bo'lsa quyidagi buyruq orqali o'rnatib oling: 1 pip install pytest Testlarni ishga tushurishdan avval va umuman olganda loyihadan foydalanish uchun sizga tizim tomonidan berilgan maxsus token zarur bo'ladi. Sinovdan o'tkazish jarayoni uchun esa \"muhit o'zgaruvchilari\"(env variables) sifatida e'lon qilgan bo'lishingiz shart. Environment Variables Windows Linux va MacOS 1 set KALIT=QIYMAT 1 export KALIT = QIYMAT Testlarni ishga tushurish uchun quyidagi buyruqning o'zi yetarli va bunda pytest ning o'zi test fayllarini topib oladi: 1 pytest tests/","title":"Sinovdan o'tkazish (pytest)"},{"location":"testing/#testing","text":"Loyihani sinovdan o'tkazishda pytest dan foydalanildi. Barcha testlar esa tests/ direktoriyasida va asosiy fayl test_korrektor_py.py hisoblanadi. Pytest Agar sizda pytest o'rnatilmagan bo'lsa quyidagi buyruq orqali o'rnatib oling: 1 pip install pytest Testlarni ishga tushurishdan avval va umuman olganda loyihadan foydalanish uchun sizga tizim tomonidan berilgan maxsus token zarur bo'ladi. Sinovdan o'tkazish jarayoni uchun esa \"muhit o'zgaruvchilari\"(env variables) sifatida e'lon qilgan bo'lishingiz shart. Environment Variables Windows Linux va MacOS 1 set KALIT=QIYMAT 1 export KALIT = QIYMAT Testlarni ishga tushurish uchun quyidagi buyruqning o'zi yetarli va bunda pytest ning o'zi test fayllarini topib oladi: 1 pytest tests/","title":"Testing"},{"location":"methods/alphabet_sorting/","text":"Metod: alphabet_sorting korrektor_py.core.Korrektor.alphabet_sorting Metod haqida O\u2019zbek alifbosiga asoslanib matnni saralash uchun Argumentlari va ularning \"tip\"lari. text: str - Saralash uchun uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: alphabet_sorting.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"shahlo \\n salom \\n o'zbek \\n salom \\n dunyo\" result = korrektor . alphabet_sorting ( text ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"dunyo\\nsalom\\nsalom\\no\\u2018zbek\\nshahlo\" }","title":"Metod - alphabet_sorting"},{"location":"methods/alphabet_sorting/#metod-alphabet_sorting","text":"","title":"Metod: alphabet_sorting"},{"location":"methods/alphabet_sorting/#korrektor_pycorekorrektoralphabet_sorting","text":"Metod haqida O\u2019zbek alifbosiga asoslanib matnni saralash uchun Argumentlari va ularning \"tip\"lari. text: str - Saralash uchun uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: alphabet_sorting.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"shahlo \\n salom \\n o'zbek \\n salom \\n dunyo\" result = korrektor . alphabet_sorting ( text ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"dunyo\\nsalom\\nsalom\\no\\u2018zbek\\nshahlo\" }","title":"korrektor_py.core.Korrektor.alphabet_sorting"},{"location":"methods/auto_correct/","text":"Metod: auto_correct korrektor_py.core.Korrektor.auto_correct Metod haqida Matnlarni korreksiya qilish uchun Argumentlari va ularning \"tip\"lari. text: str - Korreksiya qilish uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: auto_correct.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"O'zbekcha matn\" result = korrektor . auto_correct ( text ) print ( result . dict ()) Natija: 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"O\\u2018zbekcha matn\" }","title":"Metod - auto_correct"},{"location":"methods/auto_correct/#metod-auto_correct","text":"","title":"Metod: auto_correct"},{"location":"methods/auto_correct/#korrektor_pycorekorrektorauto_correct","text":"Metod haqida Matnlarni korreksiya qilish uchun Argumentlari va ularning \"tip\"lari. text: str - Korreksiya qilish uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: auto_correct.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"O'zbekcha matn\" result = korrektor . auto_correct ( text ) print ( result . dict ()) Natija: 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"O\\u2018zbekcha matn\" }","title":"korrektor_py.core.Korrektor.auto_correct"},{"location":"methods/doc/","text":"Metod: doc korrektor_py.core.Korrektor.doc Metod haqida Docx , xlsx , pptx , epub va html hujjarlarini transliteratsiya qilish uchun Argumentlari va ularning \"tip\"lari. document_path: str - Transliteratsiya qilinadigan faylga bo'lgan yo'l. alphabet: str - Hujjatni qaysi alifboga o\u2019girish. cyrillic yoki latin save_path: t.Optional[str] - O'giriligan hujjat saqlanishi kerak bo'lgan joy. save_path Agar yuqorida majburiy bo'lmagan save_path ga hech qanday argument berilmasa, u yuklab olingan faylni skript ishga tushgan joyda saqlaydi. FileResponse - obyektini qaytaradi Qo'llanishi: Hujjat va skript bir joyda turgan bo'lsa shunchaki hujjat faylini nomini kiritishingiz mumkin. Quyidagi misolda esa hujjat, python skript turgan joydagi test/ direktoriyasi ichida joylashgan. Faylga bo'lgan to'liq yo'lni ko'rsatsangiz yanada yaxshi (xuddi /home/abduaziz/... kabi). Ma'lumotlar Hech qaysi bir foydalanuvchining ma'lumotlari serverda saqlanmaydi! Hujjat (lotin): Uni kirilga transliteratsiya qilish lozim. Quyidagi kod orqali buni amalga oshirish mumkin: 1 2 3 4 5 6 7 8 9 10 11 12 13 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) document_path = \"tests/assets/example.docx\" alphabet = \"cyrillic\" save_path = \"tests/assets/saved.docx\" result = korrektor . doc ( document_path , alphabet , save_path ) print ( result . dict ()) print ( result . file_name ) Natija : 1 2 3 4 5 6 { \"file_name\" : \"tests/assets/saved.docx\" , \"status\" : \"File saved\" } tests /asse ts /saved.docx Faylning borligini tekshirib ko'ramiz: Natijani tekshirish uchun Google Docs orqali saqlangan faylni ochib ko'ramiz: It works, why ?!","title":"Metod - doc"},{"location":"methods/doc/#metod-doc","text":"","title":"Metod: doc"},{"location":"methods/doc/#korrektor_pycorekorrektordoc","text":"Metod haqida Docx , xlsx , pptx , epub va html hujjarlarini transliteratsiya qilish uchun Argumentlari va ularning \"tip\"lari. document_path: str - Transliteratsiya qilinadigan faylga bo'lgan yo'l. alphabet: str - Hujjatni qaysi alifboga o\u2019girish. cyrillic yoki latin save_path: t.Optional[str] - O'giriligan hujjat saqlanishi kerak bo'lgan joy. save_path Agar yuqorida majburiy bo'lmagan save_path ga hech qanday argument berilmasa, u yuklab olingan faylni skript ishga tushgan joyda saqlaydi. FileResponse - obyektini qaytaradi Qo'llanishi: Hujjat va skript bir joyda turgan bo'lsa shunchaki hujjat faylini nomini kiritishingiz mumkin. Quyidagi misolda esa hujjat, python skript turgan joydagi test/ direktoriyasi ichida joylashgan. Faylga bo'lgan to'liq yo'lni ko'rsatsangiz yanada yaxshi (xuddi /home/abduaziz/... kabi). Ma'lumotlar Hech qaysi bir foydalanuvchining ma'lumotlari serverda saqlanmaydi! Hujjat (lotin): Uni kirilga transliteratsiya qilish lozim. Quyidagi kod orqali buni amalga oshirish mumkin: 1 2 3 4 5 6 7 8 9 10 11 12 13 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) document_path = \"tests/assets/example.docx\" alphabet = \"cyrillic\" save_path = \"tests/assets/saved.docx\" result = korrektor . doc ( document_path , alphabet , save_path ) print ( result . dict ()) print ( result . file_name ) Natija : 1 2 3 4 5 6 { \"file_name\" : \"tests/assets/saved.docx\" , \"status\" : \"File saved\" } tests /asse ts /saved.docx Faylning borligini tekshirib ko'ramiz: Natijani tekshirish uchun Google Docs orqali saqlangan faylni ochib ko'ramiz: It works, why ?!","title":"korrektor_py.core.Korrektor.doc"},{"location":"methods/number_to_words/","text":"Metod: number_to_words korrektor_py.core.Korrektor.number_to_words Metod haqida Sonni matnga o\u2019girish uchun Argumentlari va ularning \"tip\"lari. num:int - So\u2019zlarda ifodalash uchun son ResponseText - obyektini qaytaradi Qo'llanishi: number_to_words.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) num = 25678 result = korrektor . number_to_words ( num ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"yigirma besh ming olti yuz yetmish sakkiz\" }","title":"Metod - number_to_words"},{"location":"methods/number_to_words/#metod-number_to_words","text":"","title":"Metod: number_to_words"},{"location":"methods/number_to_words/#korrektor_pycorekorrektornumber_to_words","text":"Metod haqida Sonni matnga o\u2019girish uchun Argumentlari va ularning \"tip\"lari. num:int - So\u2019zlarda ifodalash uchun son ResponseText - obyektini qaytaradi Qo'llanishi: number_to_words.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) num = 25678 result = korrektor . number_to_words ( num ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"yigirma besh ming olti yuz yetmish sakkiz\" }","title":"korrektor_py.core.Korrektor.number_to_words"},{"location":"methods/ocr/","text":"Metod: ocr korrektor_py.core.Korrektor.ocr Metod haqida Rasmdan matnni ajratib olish uchun Argumentlari va ularning \"tip\"lari. image_file_path:str - Matnni ajratib olinishi kerak bo'lgan rasmli faylga bo'lgan yo'l. ResponseText - obyektini qaytaradi Qo'llanishi: Rasm va skript bir joyda turgan bo'lsa shunchaki rasm faylini nomini kiritishingiz mumkin. Quyidagi misolda esa rasm, python skript turgan joydagi test/ direktoriyasi ichida joylashgan. Faylga bo'lgan to'liq yo'lni ko'rsatsangiz yanada yaxshi. Ma'lumotlar Hech qaysi bir foydalanuvchining ma'lumotlari serverda saqlanmaydi! Rasm fayli (realpython sahifasidan olindi) Python kod Natija : Faylni tekshirish Pythonning os moduli orqali buni amalga oshirishingiz mumkin. os.listdir() orqali skript ishga tushgan joydagi barcha fayllar va direktoriyalar ro'yxatini olasiz. os.path.isfile va os.path.isdir orqali esa obyektning fayl yoki \"papka\" ekanligini aniqlashingiz mumkin.","title":"Metod - ocr"},{"location":"methods/ocr/#metod-ocr","text":"","title":"Metod: ocr"},{"location":"methods/ocr/#korrektor_pycorekorrektorocr","text":"Metod haqida Rasmdan matnni ajratib olish uchun Argumentlari va ularning \"tip\"lari. image_file_path:str - Matnni ajratib olinishi kerak bo'lgan rasmli faylga bo'lgan yo'l. ResponseText - obyektini qaytaradi Qo'llanishi: Rasm va skript bir joyda turgan bo'lsa shunchaki rasm faylini nomini kiritishingiz mumkin. Quyidagi misolda esa rasm, python skript turgan joydagi test/ direktoriyasi ichida joylashgan. Faylga bo'lgan to'liq yo'lni ko'rsatsangiz yanada yaxshi. Ma'lumotlar Hech qaysi bir foydalanuvchining ma'lumotlari serverda saqlanmaydi! Rasm fayli (realpython sahifasidan olindi) Python kod Natija : Faylni tekshirish Pythonning os moduli orqali buni amalga oshirishingiz mumkin. os.listdir() orqali skript ishga tushgan joydagi barcha fayllar va direktoriyalar ro'yxatini olasiz. os.path.isfile va os.path.isdir orqali esa obyektning fayl yoki \"papka\" ekanligini aniqlashingiz mumkin.","title":"korrektor_py.core.Korrektor.ocr"},{"location":"methods/remove_duplicates/","text":"Metod: remove_duplicates korrektor_py.core.Korrektor.remove_duplicates Metod haqida Duplikatlarni tozalash uchun Argumentlari va ularning \"tip\"lari. text: str - Duplikatlarni o\u2019chirish uchun uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: remove_duplicates.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"salom salom dunyo\" result = korrektor . remove_duplicates ( text ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"salom dunyo\" }","title":"Metod - remove_duplicates"},{"location":"methods/remove_duplicates/#metod-remove_duplicates","text":"","title":"Metod: remove_duplicates"},{"location":"methods/remove_duplicates/#korrektor_pycorekorrektorremove_duplicates","text":"Metod haqida Duplikatlarni tozalash uchun Argumentlari va ularning \"tip\"lari. text: str - Duplikatlarni o\u2019chirish uchun uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: remove_duplicates.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"salom salom dunyo\" result = korrektor . remove_duplicates ( text ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"salom dunyo\" }","title":"korrektor_py.core.Korrektor.remove_duplicates"},{"location":"methods/remove_modifiers/","text":"Metod: remove_modifiers korrektor_py.core.Korrektor.remove_modifiers Metod haqida Yuklamalarni tozalash uchun Argumentlari va ularning \"tip\"lari. text: str - Tozalash uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: remove_modifiers.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"Uning ko'zlari ajablantirmoqda-ku\" result = korrektor . remove_modifiers ( text ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"Uning ko'zlari ajablantirmoqda\" }","title":"Metod - remove_modifiers"},{"location":"methods/remove_modifiers/#metod-remove_modifiers","text":"","title":"Metod: remove_modifiers"},{"location":"methods/remove_modifiers/#korrektor_pycorekorrektorremove_modifiers","text":"Metod haqida Yuklamalarni tozalash uchun Argumentlari va ularning \"tip\"lari. text: str - Tozalash uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: remove_modifiers.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"Uning ko'zlari ajablantirmoqda-ku\" result = korrektor . remove_modifiers ( text ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"Uning ko'zlari ajablantirmoqda\" }","title":"korrektor_py.core.Korrektor.remove_modifiers"},{"location":"methods/spell_check/","text":"Metod: spell_check Deyarli barcha tavsiflar API'ning rasmiy qo'llanmasidan olindi. Eslatma Optional[...] - bilan ko'rsatilgan barcha argumentlar majburiy emas deb hisoblanadi. korrektor_py.core.Korrektor.spell_check Metod haqida Imlo xatoliklarni tekshirish uchun Argumentlari va ularning \"tip\"lari. words:List[str] - Tekshirish uchun so\u2019zlar massivi. remove_modifiers:Optional[bool] - So\u2019zlarni tekshirish jarayonida yuklamalarni tozalash. Misol uchun bormoqda-ku so\u2019zi uchun bormoqda so\u2019zi qabul qilinadi. ResponseData - obyektini qaytaradi Qo'llanishi: spell_check.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) remove_modifiers = True words = [ \"saloma\" , \"dunyo\" ] result = korrektor . spell_check ( words , remove_modifiers ) print ( result . dict ()) Natija: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"status\" : \"ok\" , \"code\" : \"200\" , \"data\" : [ { \"word\" : \"dunyo\" , \"status\" : \"correct\" }, { \"word\" : \"saloma\" , \"status\" : \"misspell\" , \"suggestion\" : [ \"salom\" , \"alloma\" , \"salo\" ] } ] }","title":"Metod - spell_check"},{"location":"methods/spell_check/#metod-spell_check","text":"Deyarli barcha tavsiflar API'ning rasmiy qo'llanmasidan olindi. Eslatma Optional[...] - bilan ko'rsatilgan barcha argumentlar majburiy emas deb hisoblanadi.","title":"Metod: spell_check"},{"location":"methods/spell_check/#korrektor_pycorekorrektorspell_check","text":"Metod haqida Imlo xatoliklarni tekshirish uchun Argumentlari va ularning \"tip\"lari. words:List[str] - Tekshirish uchun so\u2019zlar massivi. remove_modifiers:Optional[bool] - So\u2019zlarni tekshirish jarayonida yuklamalarni tozalash. Misol uchun bormoqda-ku so\u2019zi uchun bormoqda so\u2019zi qabul qilinadi. ResponseData - obyektini qaytaradi Qo'llanishi: spell_check.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) remove_modifiers = True words = [ \"saloma\" , \"dunyo\" ] result = korrektor . spell_check ( words , remove_modifiers ) print ( result . dict ()) Natija: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"status\" : \"ok\" , \"code\" : \"200\" , \"data\" : [ { \"word\" : \"dunyo\" , \"status\" : \"correct\" }, { \"word\" : \"saloma\" , \"status\" : \"misspell\" , \"suggestion\" : [ \"salom\" , \"alloma\" , \"salo\" ] } ] }","title":"korrektor_py.core.Korrektor.spell_check"},{"location":"methods/tokenize/","text":"Metod: tokenize korrektor_py.core.Korrektor.tokenize Metod haqida Bo\u2019ginlarga ajratish uchun Argumentlari va ularning \"tip\"lari. word:str - Bo\u2019ginlarga ajratish uchun so\u2019z ResponseText - obyektini qaytaradi Qo'llanishi: tokenize.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) word = \"olamning\" result = korrektor . tokenize ( word ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"o-lam-ning\" }","title":"Metod - tokenize"},{"location":"methods/tokenize/#metod-tokenize","text":"","title":"Metod: tokenize"},{"location":"methods/tokenize/#korrektor_pycorekorrektortokenize","text":"Metod haqida Bo\u2019ginlarga ajratish uchun Argumentlari va ularning \"tip\"lari. word:str - Bo\u2019ginlarga ajratish uchun so\u2019z ResponseText - obyektini qaytaradi Qo'llanishi: tokenize.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) word = \"olamning\" result = korrektor . tokenize ( word ) print ( result . dict ()) 1 2 3 4 5 { \"status\" : \"ok\" , \"code\" : \"200\" , \"text\" : \"o-lam-ning\" }","title":"korrektor_py.core.Korrektor.tokenize"},{"location":"methods/transliterate/","text":"Metod: transliterate korrektor_py.core.Korrektor.transliterate Metod haqida Matnlarni transliteratsiya qilish uchun Argumentlari va ularning \"tip\"lari. alphabet: str - Matnni qaysi alifboga o\u2019girish. cyrillic yoki latin text: str - Transliteratsiya qilish uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: transliterate.py 1 2 3 4 5 6 7 8 9 10 11 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"Salom dunyo\" alphabet = \"cyrillic\" result = korrektor . transliterate ( alphabet , text ) print ( result . dict ()) Natija: 1 2 3 4 5 { \"text\" : \"\u0421\u0430\u043b\u043e\u043c \u0434\u0443\u043d\u0451\" , \"status\" : \"ok\" , \"code\" : \"200\" }","title":"Metod - transliterate"},{"location":"methods/transliterate/#metod-transliterate","text":"","title":"Metod: transliterate"},{"location":"methods/transliterate/#korrektor_pycorekorrektortransliterate","text":"Metod haqida Matnlarni transliteratsiya qilish uchun Argumentlari va ularning \"tip\"lari. alphabet: str - Matnni qaysi alifboga o\u2019girish. cyrillic yoki latin text: str - Transliteratsiya qilish uchun matn ResponseText - obyektini qaytaradi Qo'llanishi: transliterate.py 1 2 3 4 5 6 7 8 9 10 11 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"Salom dunyo\" alphabet = \"cyrillic\" result = korrektor . transliterate ( alphabet , text ) print ( result . dict ()) Natija: 1 2 3 4 5 { \"text\" : \"\u0421\u0430\u043b\u043e\u043c \u0434\u0443\u043d\u0451\" , \"status\" : \"ok\" , \"code\" : \"200\" }","title":"korrektor_py.core.Korrektor.transliterate"},{"location":"methods/word_frequency/","text":"Metod: word_frequency korrektor_py.core.Korrektor.word_frequency Metod haqida Chastotani hisoblash uchun Argumentlari va ularning \"tip\"lari. text:str - So\u2019zlar chastotasini hisoblash uchun matn ResponseData - obyektini qaytaradi Qo'llanishi: word_frequency.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"Bugun ajoyib kun. Men bugun ajoyib yangi ishlarni amalga oshiraman.\" result = korrektor . word_frequency ( text ) print ( result . dict ()) Natija: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"status\" : \"ok\" , \"code\" : \"200\" , \"data\" : { \"ajoyib\" : 2 , \"Bugun\" : 1 , \"kun\" : 1 , \"Men\" : 1 , \"bugun\" : 1 , \"yangi\" : 1 , \"ishlarni\" : 1 , \"amalga\" : 1 , \"oshiraman\" : 1 } }","title":"Metod - word_frequency"},{"location":"methods/word_frequency/#metod-word_frequency","text":"","title":"Metod: word_frequency"},{"location":"methods/word_frequency/#korrektor_pycorekorrektorword_frequency","text":"Metod haqida Chastotani hisoblash uchun Argumentlari va ularning \"tip\"lari. text:str - So\u2019zlar chastotasini hisoblash uchun matn ResponseData - obyektini qaytaradi Qo'llanishi: word_frequency.py 1 2 3 4 5 6 7 8 9 10 from korrektor_py import Korrektor TOKEN = ... korrektor = Korrektor ( TOKEN ) text = \"Bugun ajoyib kun. Men bugun ajoyib yangi ishlarni amalga oshiraman.\" result = korrektor . word_frequency ( text ) print ( result . dict ()) Natija: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"status\" : \"ok\" , \"code\" : \"200\" , \"data\" : { \"ajoyib\" : 2 , \"Bugun\" : 1 , \"kun\" : 1 , \"Men\" : 1 , \"bugun\" : 1 , \"yangi\" : 1 , \"ishlarni\" : 1 , \"amalga\" : 1 , \"oshiraman\" : 1 } }","title":"korrektor_py.core.Korrektor.word_frequency"}]}