{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Korrektor-Py","text":"<p> Korrektor-Py - https://korrektor.uz loyihasining API'si uchun ishlab chiqilgan python kutubxona.       </p>"},{"location":"#loyiha-haqida","title":"Loyiha haqida","text":"<p>korrektor.uz quyidagi imkoniyatlarni siz uchun taqdim etadi.</p> <ul> <li>Imlo xatoliklarni tekshirish</li> <li>Matnlarni transliteratsiya qilish</li> <li>Tasvir fayllardan matnlarni ajratib olish (jpeg, png, gif)</li> <li>Hujjatlarni transliteratsiya qilish (docx, xlsx, pptx, epub, html)</li> <li>Matnlar bilan ishlashda: raqamni so'zga o'girish, so'zlarni korreksiya qilish, so'zni bo'g'inga ajratish, dublikatlarni o'chirish, matndagi so'zlar chastotasini hisoblash kabi qo'shimcha vositalardan foydalanish imkoniyatini yaratib beradi.</li> </ul> <p>Ilovadan foydalanish mutlaqo tekin va dasturchilar uchun ham turli yechimlar mavjud.</p> <p>Python dasturchilar uchun turli yechimlardan biri ushbu kutubxona hisoblanadi. Yuqorida keltirilgan barcha imkoniyatlardan python dasturlash tili orqali bahramand bo'lishingiz mumkin.</p>"},{"location":"#ornatish","title":"O'rnatish","text":"<ul> <li><code>pip</code> yordamida:</li> </ul> <pre><code>pip3 install --upgrade korrektor-py\n</code></pre> <p>Yoki:</p> <ul> <li>Loyihani asl manba kodidan <code>build</code> qilib, so'ng o'rnatish uchun repozitoriyani ko'chirib oling:</li> </ul> <pre><code>git clone https://github.com/AbduazizZiyodov/korrektor-py.git\ncd korrektor-py/\n</code></pre> <p>Loyiha direktoriyasiga o'tganingizdan so'ng <code>setup.py</code> yordamida uni <code>build</code> qiling.   Loyiha versiyasini aniqlab olgandan so'ng, <code>pip</code> va wheel fayli yordamida o'rnatishingiz mumkin.</p> <pre><code>python3 setup.py sdist bdist_wheel\nVERSION=$(python3 -c \"from __version__ import version;print(version)\")\npip3 install dist/Korrektor_Py-$VERSION-py3-none-any.whl\n</code></pre> <ul> <li>Loyiha asoschisi: Manuchehr Usmonov</li> <li>Ushbu kutubxona muallifi: Abduaziz Ziyodov</li> </ul>"},{"location":"objects/","title":"Asosiy obyektlar haqida","text":""},{"location":"objects/#korrektor_pycorekorrektor","title":"<code>korrektor_py.core.Korrektor</code>","text":"<p><code>Korrektor</code> obyekti o'zida <code>API</code>ning barcha metodlarini jamlagan</p> <p>Argumentlar:</p> <ul> <li><code>token:str</code> - tizim tomonidan berilgan token</li> <li><code>base_api_url:Optional[str]</code> - Asosiy API manzili, kutubxona tomonidan <code>default</code> qiymat belgilangan.</li> </ul>"},{"location":"objects/#korrektor_pyapiclient","title":"<code>korrektor_py.api.Client</code>","text":"<p><code>Client</code> obyekti <code>API</code> bilan muloqot qilish vazifasida keladi.</p> <p>Argumentlar:</p> <ul> <li><code>token:str</code> - tizim tomonidan berilgan token</li> <li><code>base_api_url:Optional[str]</code> - Asosiy API manzili, kutubxona tomonidan <code>default</code> qiymat belgilangan.</li> </ul> <p>Annotatsiyalar</p> <p>Dasturchilarga qulaylik yaratish uchun <code>type-hinting</code> masalasiga alohida urg'u berilgan. Har bir method muvaffaqiyatli bajarilganida <code>dict</code> emas maxsus python obyektini qaytaradi va har bir kiritilgan &amp; chiqarilgan qiymatlar maydonlari bo'yicha tekshiruvdan o'tadi (validation).</p> <pre><code># dict bo'lsa\nresult[\"data\"]\n\n# obyekt bo'lsa\nresult.data # izi\n</code></pre> <p>Ushbu \"type-hint\"lar deyarli barcha zamonaviy kod muharrirlari tomonidan qo'llab quvvatlanadi:</p> <p></p> <p>Metodlar tomonidan qaytarilgan barcha natijalar maxsus obyekt ko'rinishida bo'ladi (<code>dict</code> emas). Muvvaqiyatsiz natijalar uchun yagona obyekt (<code>ResponseError</code>) qaytariladi.</p> <p>Xatoliklar uchun:</p> <p>Attributlar</p> <p>Yuqoridagilardan qanday foydalanishni bilmayotganlar uchun: Misol uchun siz natijani olib terminalga <code>print</code> qilib ko'rdingiz va u <code>ResponseError</code> obyekti ekan. Tepada ko'rsatilganidek u <code>status</code>, <code>code</code> va <code>description</code> kabi atributlarga ega.</p> <pre><code>result = korrektor.spell_check(...)\n\n# xatolik xabarini olish uchun\ndescription = result.description\n\n# xatolik statusi\ndescription = result.status\n# va hokazo\n</code></pre>"},{"location":"objects/#korrektor_pymodelsresponsetext","title":"<code>korrektor_py.models.ResponseText</code>","text":"<ul> <li><code>status:str</code> - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatli javoblar uchun <code>ok</code> qaytariladi.</li> <li><code>code:str</code> - yuqoridagi statusga biriktirilgan maxsus kod. Muvaffaqiyatli javoblar uchun <code>200</code> qaytariladi.</li> <li><code>text:str</code> - API tomonidan ishlov berilgan so'z yoki gap.</li> </ul>"},{"location":"objects/#korrektor_pymodelsresponsedata","title":"<code>korrektor_py.models.ResponseData</code>","text":"<ul> <li><code>status:str</code> - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatli javoblar uchun <code>ok</code> qaytariladi.</li> <li><code>code:str</code> - yuqoridagi statusga biriktirilgan maxsus kod. Muvaffaqiyatli javoblar uchun <code>200</code> qaytariladi.</li> <li><code>data:Iterable</code> - API tomonidan ishlov berilgan so'z yoki gaplardan iborat massiv.</li> </ul>"},{"location":"objects/#korrektor_pymodelsfileresponse","title":"<code>korrektor_py.models.FileResponse</code>","text":"<ul> <li><code>status:str</code> - holat haqidagi maxsus so'z. Fayl saqlangan bo'lsa <code>File saved</code> belgilangan turadi.</li> <li><code>file_name:str</code> - saqlangan fayl nomi yoki joyi.</li> </ul>"},{"location":"objects/#korrektor_pymodelsresponseerror","title":"<code>korrektor_py.models.ResponseError</code>","text":"<ul> <li><code>status:str</code> - server tomonidan yuborilgan holat haqidagi maxsus so'z. Muvaffaqiyatsiz javoblar uchun odatda <code>error</code> qaytariladi.</li> <li><code>code:str</code> - yuqoridagi statusga biriktirilgan maxsus kod (<code>200</code>dan farqli).</li> <li><code>description:str</code> - API tomonidan qaytarilgan xatolik haqidagi xabar.</li> </ul>"},{"location":"objects/#bazi-metodlar","title":"Ba'zi metodlar","text":"<p>Yuqoridagi obyektlar ba'zi metodlarga ega (ko'p foydalananilgan):</p> <ul> <li><code>json()</code> - natijani JSON ko'rinishidagi python'dagi satrga o'tkazadi.</li> <li><code>dict()</code> - obyektni python'dagi <code>dict</code> ko'rinishiga o'tkazadi (<code>dict</code> != <code>json str</code>).</li> </ul> <p>Keyingi sahifalarda esa kutubxonada mavjud bo'lgan barcha metodlar va ularni qanday ishlatish haqida birma-bir to'liq ma'lumotlar keltirilgan.</p>"},{"location":"quickstart/","title":"Ishni boshlash","text":"<p>Havolalar</p> <p>Loyihaning asosiy sahifasi, uning API'si va API yo'riqnomasi</p>"},{"location":"quickstart/#ishni-boshlash","title":"Ishni Boshlash","text":"<p>Kutubxonani o'rnatganingizdan so'ng, undagi API'ning barcha metodlari jamlangan <code>Korrektor</code> obyektini loyihaga import qiling. So'ng, ushbu asosiy obyektga sizga tizim tomonidan berilgan token'ni argument sifatida berib, ishga tushuring (initialization).</p> <pre><code>from korrektor_py import Korrektor\n\nkorrektor = Korrektor(\"SENING_TOKENING\")\n</code></pre> <p>Tokenlar</p> <p>Tokenlar va shunga o'xshash \"sirli\" ma'lumotlarni kodda saqlash umuman tavsiya etilmaydi. Shuning uchun ularni <code>.env</code> ko'rinishidagi fayllar yoki tizimning muhitida (e.g. env variables) saqlang.</p> <ul> <li> <p>Terminalda:</p> <pre><code>export KORREKTOR_TOKEN=TIZIM_TOMONIDAN_BERILGAN_TOKEN\n</code></pre> </li> <li> <p><code>code.py</code> ya'ni kodingizda</p> <pre><code>import os\nTOKEN = os.getenv(\"KORREKTOR_TOKEN\")\n</code></pre> </li> </ul> <p>Qo'shimcha resurs</p>"},{"location":"quickstart/#metodlardan-foydalanish","title":"Metodlardan foydalanish","text":"<p>Sinov maqsadida imloviy xatolarni tekshirish metodini ishlatib ko'ramiz.</p> <pre><code>import os\nfrom korrektor_py import Korrektor\n\nTOKEN=os.getenv(\"KORREKTOR_TOKEN\")\nkorrektor = Korrektor(TOKEN)\n\ndef main() -&gt; None:\n    remove_modifiers = True\n    words = [\n        \"saloma\",\n        \"dunyo\"\n    ]\n\n    result = korrektor.spell_check(words, remove_modifiers)\n\n    print(result.dict())\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p></p> <p>O'ng tomonda esa <code>dict</code>ga o'girilgan API orqali qayta ishlangan ma'lumot. Xullas ishladi ;)</p>"},{"location":"testing/","title":"Sinovdan o'tkazish (pytest)","text":""},{"location":"testing/#testing","title":"Testing","text":"<p>Loyihani sinovdan o'tkazishda <code>pytest</code>dan foydalanildi. Barcha testlar esa <code>tests/</code> direktoriyasida va asosiy fayl <code>test_korrektor_py.py</code> hisoblanadi.</p> <p>Pytest</p> <p>Agar sizda pytest o'rnatilmagan bo'lsa quyidagi buyruq orqali o'rnatib oling:</p> <pre><code>pip install pytest\n</code></pre> <p>Testlarni ishga tushurishdan avval va umuman olganda loyihadan foydalanish uchun sizga tizim tomonidan berilgan maxsus token zarur bo'ladi. Sinovdan o'tkazish jarayoni uchun esa \"muhit o'zgaruvchilari\"(env variables) sifatida e'lon qilgan bo'lishingiz shart.</p> <p>Environment Variables</p> WindowsLinux va MacOS <pre><code>set KALIT=QIYMAT\n</code></pre> <pre><code>export KALIT=QIYMAT\n</code></pre> <p>Testlarni ishga tushurish uchun quyidagi buyruqning o'zi yetarli va bunda <code>pytest</code>ning o'zi test fayllarini topib oladi:</p> <pre><code>pytest tests/\n</code></pre> <p></p>"},{"location":"methods/alphabet_sorting/","title":"Metod: <code>alphabet_sorting</code>","text":""},{"location":"methods/alphabet_sorting/#korrektor_pycorekorrektoralphabet_sorting","title":"<code>korrektor_py.core.Korrektor.alphabet_sorting</code>","text":"<p>Metod haqida</p> <p>O\u2019zbek alifbosiga asoslanib matnni saralash uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>text: str</code> - Saralash uchun uchun matn</li> </ul> <p>ResponseText - obyektini qaytaradi</p> <p>Qo'llanishi:</p> alphabet_sorting.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\ntext = \"shahlo\\nsalom\\no'zbek\\nsalom\\ndunyo\"\n\nresult = korrektor.alphabet_sorting(text)\nprint(result.dict())\n</code></pre> <pre><code>{\n\"status\": \"ok\",\n\"code\": \"200\",\n\"text\": \"dunyo\\nsalom\\nsalom\\no\\u2018zbek\\nshahlo\"\n}\n</code></pre>"},{"location":"methods/auto_correct/","title":"Metod: <code>auto_correct</code>","text":""},{"location":"methods/auto_correct/#korrektor_pycorekorrektorauto_correct","title":"<code>korrektor_py.core.Korrektor.auto_correct</code>","text":"<p>Metod haqida</p> <p>Matnlarni korreksiya qilish uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>text: str</code> - Korreksiya qilish uchun matn</li> </ul> <p>ResponseText - obyektini qaytaradi</p> <p>Qo'llanishi:</p> auto_correct.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\ntext = \"O'zbekcha matn\"\n\nresult = korrektor.auto_correct(text)\nprint(result.dict())\n</code></pre> <p>Natija:</p> <pre><code>{\n\"status\": \"ok\",\n\"code\": \"200\",\n\"text\": \"O\\u2018zbekcha matn\"\n}\n</code></pre>"},{"location":"methods/doc/","title":"Metod: <code>doc</code>","text":""},{"location":"methods/doc/#korrektor_pycorekorrektordoc","title":"<code>korrektor_py.core.Korrektor.doc</code>","text":"<p>Metod haqida</p> <p><code>Docx</code>, <code>xlsx</code>, <code>pptx</code>, <code>epub</code> va <code>html</code> hujjarlarini transliteratsiya qilish uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>document_path: str</code> - Transliteratsiya qilinadigan faylga bo'lgan yo'l.</li> <li><code>alphabet: str</code> - Hujjatni qaysi alifboga o\u2019girish. <code>cyrillic</code> yoki <code>latin</code></li> <li><code>save_path: t.Optional[str]</code> - O'giriligan hujjat saqlanishi kerak bo'lgan joy.</li> </ul> <p>save_path</p> <p>Agar yuqorida majburiy bo'lmagan <code>save_path</code>ga hech qanday argument berilmasa, u yuklab olingan faylni skript ishga tushgan joyda saqlaydi.</p> <p>FileResponse - obyektini qaytaradi</p> <p>Qo'llanishi:</p> <p>Hujjat va skript bir joyda turgan bo'lsa shunchaki hujjat faylini nomini kiritishingiz mumkin. Quyidagi misolda esa hujjat, python skript turgan joydagi <code>test/</code> direktoriyasi ichida joylashgan. Faylga bo'lgan to'liq yo'lni ko'rsatsangiz yanada yaxshi (xuddi <code>/home/abduaziz/...</code> kabi).</p> <p>Ma'lumotlar</p> <p>Hech qaysi bir foydalanuvchining ma'lumotlari serverda saqlanmaydi!</p> <ul> <li>Hujjat (lotin):   </li> </ul> <p>Uni kirilga transliteratsiya qilish lozim. Quyidagi kod orqali buni amalga oshirish mumkin:</p> <pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\ndocument_path = \"tests/assets/example.docx\"\nalphabet = \"cyrillic\"\nsave_path = \"tests/assets/saved.docx\"\n\nresult = korrektor.doc(document_path, alphabet, save_path)\n\nprint(result.dict())\nprint(result.file_name)\n</code></pre> <p>Natija:</p> <pre><code>{\n\"file_name\": \"tests/assets/saved.docx\",\n\"status\": \"File saved\"\n}\n\ntests/assets/saved.docx\n</code></pre> <ul> <li>Faylning borligini tekshirib ko'ramiz:</li> </ul> <p></p> <ul> <li>Natijani tekshirish uchun <code>Google Docs</code> orqali saqlangan faylni ochib ko'ramiz:</li> </ul> <p></p> <p>It works, why ?!</p>"},{"location":"methods/number_to_words/","title":"Metod: <code>number_to_words</code>","text":""},{"location":"methods/number_to_words/#korrektor_pycorekorrektornumber_to_words","title":"<code>korrektor_py.core.Korrektor.number_to_words</code>","text":"<p>Metod haqida</p> <p>Sonni matnga o\u2019girish uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>num:int</code> - So\u2019zlarda ifodalash uchun son</li> </ul> <p>ResponseText - obyektini qaytaradi</p> <p>Qo'llanishi:</p> number_to_words.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\nnum = 25678\n\nresult = korrektor.number_to_words(num)\nprint(result.dict())\n</code></pre> <pre><code>{\n\"status\": \"ok\",\n\"code\": \"200\",\n\"text\": \"yigirma besh ming olti yuz yetmish sakkiz\"\n}\n</code></pre>"},{"location":"methods/ocr/","title":"Metod: <code>ocr</code>","text":""},{"location":"methods/ocr/#korrektor_pycorekorrektorocr","title":"<code>korrektor_py.core.Korrektor.ocr</code>","text":"<p>Metod haqida</p> <p>Rasmdan matnni ajratib olish uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>image_file_path:str</code> - Matnni ajratib olinishi kerak bo'lgan rasmli faylga bo'lgan yo'l.</li> </ul> <p>ResponseText - obyektini qaytaradi</p> <p>Qo'llanishi:</p> <p>Rasm va skript bir joyda turgan bo'lsa shunchaki rasm faylini nomini kiritishingiz mumkin. Quyidagi misolda esa rasm, python skript turgan joydagi <code>test/</code> direktoriyasi ichida joylashgan. Faylga bo'lgan to'liq yo'lni ko'rsatsangiz yanada yaxshi.</p> <p>Ma'lumotlar</p> <p>Hech qaysi bir foydalanuvchining ma'lumotlari serverda saqlanmaydi!</p> <ul> <li> <p>Rasm fayli (realpython sahifasidan olindi)   </p> </li> <li> <p>Python kod   </p> </li> </ul> <p>Natija:</p> <p></p> <p>Faylni tekshirish</p> <p>Pythonning <code>os</code> moduli orqali buni amalga oshirishingiz mumkin.</p> <p><code>os.listdir()</code> orqali skript ishga tushgan joydagi barcha fayllar va direktoriyalar ro'yxatini olasiz.</p> <p><code>os.path.isfile</code> va <code>os.path.isdir</code> orqali esa obyektning fayl yoki \"papka\" ekanligini aniqlashingiz mumkin.</p>"},{"location":"methods/remove_duplicates/","title":"Metod: <code>remove_duplicates</code>","text":""},{"location":"methods/remove_duplicates/#korrektor_pycorekorrektorremove_duplicates","title":"<code>korrektor_py.core.Korrektor.remove_duplicates</code>","text":"<p>Metod haqida</p> <p>Duplikatlarni tozalash uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>text: str</code> - Duplikatlarni o\u2019chirish uchun uchun matn</li> </ul> <p>ResponseText - obyektini qaytaradi</p> <p>Qo'llanishi:</p> remove_duplicates.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\ntext = \"salom salom dunyo\"\n\nresult = korrektor.remove_duplicates(text)\nprint(result.dict())\n</code></pre> <pre><code>{\n\"status\": \"ok\",\n\"code\": \"200\",\n\"text\": \"salom dunyo\"\n}\n</code></pre>"},{"location":"methods/remove_modifiers/","title":"Metod: <code>remove_modifiers</code>","text":""},{"location":"methods/remove_modifiers/#korrektor_pycorekorrektorremove_modifiers","title":"<code>korrektor_py.core.Korrektor.remove_modifiers</code>","text":"<p>Metod haqida</p> <p>Yuklamalarni tozalash uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>text: str</code> - Tozalash uchun matn</li> </ul> <p>ResponseText - obyektini qaytaradi</p> <p>Qo'llanishi:</p> remove_modifiers.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\ntext = \"Uning ko'zlari ajablantirmoqda-ku\"\n\nresult = korrektor.remove_modifiers(text)\nprint(result.dict())\n</code></pre> <pre><code>{\n\"status\": \"ok\",\n\"code\": \"200\",\n\"text\": \"Uning ko'zlari ajablantirmoqda\"\n}\n</code></pre>"},{"location":"methods/spell_check/","title":"Metod: <code>spell_check</code>","text":"<p>Deyarli barcha tavsiflar API'ning rasmiy qo'llanmasidan olindi.</p> <p>Eslatma</p> <p><code>Optional[...]</code> - bilan ko'rsatilgan barcha argumentlar majburiy emas deb hisoblanadi.</p>"},{"location":"methods/spell_check/#korrektor_pycorekorrektorspell_check","title":"<code>korrektor_py.core.Korrektor.spell_check</code>","text":"<p>Metod haqida</p> <p>Imlo xatoliklarni tekshirish uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>words:List[str]</code> - Tekshirish uchun so\u2019zlar massivi.</li> <li><code>remove_modifiers:Optional[bool]</code> - So\u2019zlarni tekshirish jarayonida yuklamalarni tozalash. Misol uchun   bormoqda-ku so\u2019zi uchun bormoqda so\u2019zi qabul qilinadi.</li> </ul> <p>ResponseData - obyektini qaytaradi</p> <p>Qo'llanishi:</p> spell_check.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\nremove_modifiers = True\nwords = [\n    \"saloma\",\n    \"dunyo\"\n]\n\nresult = korrektor.spell_check(words, remove_modifiers)\nprint(result.dict())\n</code></pre> <p>Natija:</p> <pre><code>{\n\"status\": \"ok\",\n\"code\": \"200\",\n\"data\": [\n{\n\"word\": \"dunyo\",\n\"status\": \"correct\"\n},\n{\n\"word\": \"saloma\",\n\"status\": \"misspell\",\n\"suggestion\": [\"salom\", \"alloma\", \"salo\"]\n}\n]\n}\n</code></pre>"},{"location":"methods/tokenize/","title":"Metod: <code>tokenize</code>","text":""},{"location":"methods/tokenize/#korrektor_pycorekorrektortokenize","title":"<code>korrektor_py.core.Korrektor.tokenize</code>","text":"<p>Metod haqida</p> <p>Bo\u2019ginlarga ajratish uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>word:str</code> - Bo\u2019ginlarga ajratish uchun so\u2019z</li> </ul> <p>ResponseText - obyektini qaytaradi</p> <p>Qo'llanishi:</p> tokenize.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\nword = \"olamning\"\n\nresult = korrektor.tokenize(word)\nprint(result.dict())\n</code></pre> <pre><code>{\n\"status\": \"ok\",\n\"code\": \"200\",\n\"text\": \"o-lam-ning\"\n}\n</code></pre>"},{"location":"methods/transliterate/","title":"Metod: <code>transliterate</code>","text":""},{"location":"methods/transliterate/#korrektor_pycorekorrektortransliterate","title":"<code>korrektor_py.core.Korrektor.transliterate</code>","text":"<p>Metod haqida</p> <p>Matnlarni transliteratsiya qilish uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>alphabet: str</code> - Matnni qaysi alifboga o\u2019girish. <code>cyrillic</code> yoki <code>latin</code></li> <li><code>text: str</code> - Transliteratsiya qilish uchun matn</li> </ul> <p>ResponseText - obyektini qaytaradi</p> <p>Qo'llanishi:</p> transliterate.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\ntext = \"Salom dunyo\"\nalphabet = \"cyrillic\"\n\nresult = korrektor.transliterate(alphabet, text)\nprint(result.dict())\n</code></pre> <p>Natija:</p> <pre><code>{\n\"text\": \"\u0421\u0430\u043b\u043e\u043c \u0434\u0443\u043d\u0451\",\n\"status\": \"ok\",\n\"code\": \"200\"\n}\n</code></pre>"},{"location":"methods/word_frequency/","title":"Metod: <code>word_frequency</code>","text":""},{"location":"methods/word_frequency/#korrektor_pycorekorrektorword_frequency","title":"<code>korrektor_py.core.Korrektor.word_frequency</code>","text":"<p>Metod haqida</p> <p>Chastotani hisoblash uchun</p> <p>Argumentlari va ularning \"tip\"lari.</p> <ul> <li><code>text:str</code> - So\u2019zlar chastotasini hisoblash uchun matn</li> </ul> <p>ResponseData - obyektini qaytaradi</p> <p>Qo'llanishi:</p> word_frequency.py<pre><code>from korrektor_py import Korrektor\n\nTOKEN =  ...\nkorrektor = Korrektor(TOKEN)\n\ntext = \"Bugun ajoyib kun. Men bugun ajoyib yangi ishlarni amalga oshiraman.\"\n\nresult = korrektor.word_frequency(text)\n\nprint(result.dict())\n</code></pre> <p>Natija:</p> <pre><code>{\n\"status\": \"ok\",\n\"code\": \"200\",\n\"data\": {\n\"ajoyib\": 2,\n\"Bugun\": 1,\n\"kun\": 1,\n\"Men\": 1,\n\"bugun\": 1,\n\"yangi\": 1,\n\"ishlarni\": 1,\n\"amalga\": 1,\n\"oshiraman\": 1\n}\n}\n</code></pre>"}]}